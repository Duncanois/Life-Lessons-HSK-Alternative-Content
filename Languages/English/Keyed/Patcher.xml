<?xml version="1.0" encoding="utf-8" ?>
<LanguageData>
  <LL-DisclaimerText>This is a utility to assist in the creation of integration patches for LifeLessons. This is not a substitute to actual knowledge of how to create and apply a patch. If you do not know how to create a patch by hand, where to install it, how to access game logs, or how to debug issues with XML patch resolution, you have no business using this tool.

Using this tool can break your LifeLessons installation entirely. You can use it to create nonsensical or invalid patches that will not load. You can use it to overwrite more complex hand-written patches. Patches generated by this tool will not account for the presence of other mods that may alter or remove the recipes of the mod you are patching. Some necessary LifeLessons patches cannot be generated using this tool.
By using this tool, you are acknowledging the risk associated with modifying your installation. You will not receive first-party support for basic modding questions such as where to install the generated patches.
  </LL-DisclaimerText>

  <LL-PatcherCapabilities1>This utility can aid in the generation of xml patches to integrate Life Lesson proficiencies with other mods. A full integration includes patches for recipes, surgeries, craftable items, constructible and deconstructible buildings, jobs, workgivers, research projects, pawn interactions, and hediffs. This utility can aid in the generation of some, but not all of these patches. 

Currently, jobs can have rewards, but not requirements. Interactions cannot be patched in the UI. Hediff treatments cannot be patched in the UI. Deeper integration cannot be handled with XML patches.
Patches that are generated are not automatically installed and must be manually reviewed and moved into the mod folder.

If any of the above is unclear or confusing, it is very probable that you should not use this utility.
  </LL-PatcherCapabilities1>

  <LL-Rewards>Rewards are generated either per tick (For work and jobs) or all at once (when completing deconstruction.) By default, per tick generation is at 0.03XP per tick. progressGain can be set manually to change this. Jobs should have a very low progressGain to prevent rapid mastery. progressMultiplier works as a straight multiplier to the total generated XP. Multiple rewards may be used, and rewarding both a proficiency and its prerequisite is acceptable. XP will only be applied to proficiencies that have all prerequisites met.</LL-Rewards>

  <LL-DeconRewards>Deconstruction rewards are applied only when the job is finished, so the progressGain should be total XP. Broadly speaking, trivial deconstructions like lamps should reward 1/100th or less of a proficiency. Complex deconstructions (like ship parts) should not reward more than 1/10th of a proficiency. It is reasonable to have complex deconstructions reward multiple prerequisites, such as Electronics, Mechanics, and Engineering.</LL-DeconRewards>

  <LL-Requirements>Requirements lockout a recipe or construction unless the pawn owns ALL of the proficiencies specified. Only the highest level proficiency is needed - you do not and should not include prerequisites.

Requirements may be flagged as "soft requirements" to allow the pawn to work on the task with a penalty instead of locking them out entirely. Soft requirements have two additional configurations.
1. Quality Cap - where applicable, items or buildings will be capped at this level of quality if the pawn is unqualified.
2. Workspeed Multiplier - where applicable, bill workspeed will be multiplied by this value when worked by unqualified pawns.
When setting requirements for any recipe or research project, review the assignment tips for the proficiency to help determine if it is a good fit.</LL-Requirements>

  <LL-PatchingWorkgivers>Workgivers can have both requirements and rewards. By defualt, rewards generate 0.03 XP per tick, but may be reduced through progressGain settings. If no pawn is qualified for a workgiver, the right click context menu will display a message saying as much. 
Generally, workgivers can include both Applied proficiencies such as Mechanics as well as nonapplied proficiencies such as Astronomy.
Be cautious not to patch workgivers needlessly, as patching some workgivers could break the functionality of the other mod. If you're not sure, don't patch it.
Note that a "bill" work giver should never be patched with requirements, as it will fully override any individual bill requirements. The only exception should be "operator" style proficiencies. For example, the workgiver can require "machine operator" as a proficiency to lockout the workgiver entirely, while individual bills may require something else.</LL-PatchingWorkgivers>

  <LL-PatchingInteractions>Interactions cannot be patched in the utility. Review out-of-game documentation for patching instructions.</LL-PatchingInteractions>

  <LL-PatchingResearch>Research projects can only have requirements. Generally, only science related proficiencies should be used, though certain applied proficiencies such as engineering and electronics are commonly used. Atleast one pawn assigned to research must have ALL of the required proficiencies for reasearch to begin.</LL-PatchingResearch>

  <LL-PatchingRecipes>Recipes include any non-generated recipe. These are usually surgeries, but some mods also use them for items. If an item has a GENERATED recipe, the item itself should be patched - NOT the generated recipe. If an item cannot be crafted at all, it does not need a patch.

Surgeries should generally be gated by Medical or Bionics. Crafted items should generally be gated by proficiencies from the fabrication tree, such as smithing and advanced fabrication.</LL-PatchingRecipes>

  <LL-PatchingItems>Most items have auto generated recipes at runtime. These items should be patched directly instead of patching the recipes. 
Crafted items should generally be gated by proficiencies from the fabrication tree, such as smithing and advanced fabrication. Review the assignment tips of each proficiency to determine if it's a good fit.</LL-PatchingItems>

  <LL-PatchingHediffs>Hediffs cannot be patched in the utility. Review out-of-game documentation for patching instructions.</LL-PatchingHediffs>

  <LL-PatchingJobs>Jobs can presently only have rewards, and not requirements. Joy jobs such as reading or playing on arcade machines cannot currently have requirements.
Be cautious not to patch Jobs needlessly, as patching some Jobs could break the functionality of the other mod. If you're not sure, don't patch it.</LL-PatchingJobs>

  <LL-PatchingBuildings>Buildings can have requirements, rewards (for building,) and deconstruction rewards. Deconstruction rewards can and often should award XP for multiple proficiencies. For example, deconstruction a ship module should grant XP for ship building, mechanics, electronics, and engineering. This makes it worth while for many different pawns. Common items like detritus or player-made buildings should use deconstruct rewards sparingly.

Generally, requirements should come from the "construction tree" of proficiencies, such as electronics, mechanics, engineering, etc. It is also acceptable to include nonapplied proficiencies such as Geology where it makes sense for some scientific background to be used. 
Review the Assignment Tips for each proficiency to get a better understanding of how it should be assigned and used with other proficiencies.</LL-PatchingBuildings>

  <LL-PatchingBackstories>Backstories are applied to a newly generated pawn from both their childhood and adult backstory. Backstories that are not accounted for do not have proficiencies at all.
The assignment tips for each proficiency include tips on who to assign each proficiency to. 
Broadly speaking, tribal childhoods should only include speaking and relevant applied proficiencies such as plant care, whereas tribal adulthoods should usually not include basic science or mathematics unless relevant.

A standard industrial education would likely cap out at AdvancedScience for adults and BasicScience for children. Usually specializations like Biology are reserved for researchers or relevant backstories.
Glitter or spacer education usually covers up to AdvancedScience for all adults as part of elementary education.
Medical is reserved for "Proper" doctors. Medieval doctors are usually of the quack-science variety and cap out at Biology.
ShipBuilding and Engineering are reserved for proper engineers. Illegal or blackmarket versions of these are usually capped one level below.
Most soldiers or military backstories include First Aid.

Backstories can have conditional proficiencies for "leaf" proficencies. These can be added by using the "Add Conditional" button in the UI. A conditional set performs the specified number of rolls with the configured % chance. For each successful roll, one of the proficiencies included in the list will be added to the pawn on generation. This can be used where the backstory implies further proficiency (such as "scientist") but doesn't specify.
Conditionals may be editted by selecting them in the UI.</LL-PatchingBackstories>

  <LL-PatchOutput>All generated content is stored in %appdata%\LocalLow\Ludeon Studios\RimWorld by Ludeon Studios\DevOutput\LifeLessons
Patches are generated in the Content folder and should be placed in the Life Lessons/Content/Mods folder, or the corresponding loaded folder of your own mod.
Patches for vanilla and DLC content should NOT be installed in the mods folder, and should probably not be modified at all.

Once the patch folder has been placed, find the LoadFoldersAddon.xml in the same directory. This contains the generated mod inclusion entry to be added to the LoadFolders.xml in your mod folder. Add the records there.

Patches that include new ProficiencyDefs specific to your mod will be generated with a "MayRequire" attribute to prevent them from loading when your mod is not loaded.
LoadFolderAddons specify the packageId for the patched mod, as well as the _Steam version of the packageId. This is due to a bug in vanilla resolution.
When a modded def extends the vanilla def, both the vanilla def and the extended def will be included in the patch.</LL-PatchOutput>

  <LL-PatcherCapabilities2>- Backstory templates are saved in the mod config and may be applied to quickly setup a backstory according to your preferences.
- Filters can be used to search for case insensitive substrings. 
- "Add to Filtered" in the backstory UI will apply the proficiency to all currently displayed backstories.
- The title of each proficiency category can be dragged to rearrange them. Arrangements are saved.
- Hediffs and Interactions cannot be patched in the UI, but are displayed to determine if a mod needs external patchwork.
- "Things" in the patch type is an unfiltered list of all ThingDefs in the selected mod. Use this to identify oddballs.
</LL-PatcherCapabilities2>

  <LL-LabelCapabilities>Patcher Capabilities</LL-LabelCapabilities>
  <LL-LabelCapabilities2>Patcher Tips</LL-LabelCapabilities2>
  <LL-LabelRewards>Rewards</LL-LabelRewards>
  <LL-LabelRequirements>Requirements</LL-LabelRequirements>
  <LL-LabelSoftRequirements>Soft Requirements</LL-LabelSoftRequirements>
  <LL-LabelDeconRewards>Deconstruction Rewards</LL-LabelDeconRewards>
  <LL-LabelWorkgivers>Workgivers</LL-LabelWorkgivers>
  <LL-LabelInteractions>Interactions</LL-LabelInteractions>
  <LL-LabelResearch>Research Projects</LL-LabelResearch>
  <LL-LabelRecipes>Recipes</LL-LabelRecipes>
  <LL-LabelItems>Items</LL-LabelItems>
  <LL-LabelHediffs>Hediffs</LL-LabelHediffs>
  <LL-LabelJobs>Jobs</LL-LabelJobs>
  <LL-LabelBuildings>Buildings</LL-LabelBuildings>
  <LL-LabelBackstories>Backstories</LL-LabelBackstories>
  <LL-LabelOutput>Output</LL-LabelOutput>

  <LL-ResearchUnlockedDefs>Unlocks Defs</LL-ResearchUnlockedDefs>
  <LL-RequiredResearchBench>Researched At</LL-RequiredResearchBench>
  <LL-Prerequisites>Prerequisites</LL-Prerequisites>
  <LL-Ingredients>Ingredients</LL-Ingredients>
  <LL-RecipeUsers>Recipe Users</LL-RecipeUsers>

  <LL-LabelProgressGain>progressGain</LL-LabelProgressGain>
  <LL-LabelProgressMult>progressMult</LL-LabelProgressMult>
  <LL-LabelMaxQuality>Max Quality</LL-LabelMaxQuality>
  <LL-LabelWorkMult>Workspeed Mult</LL-LabelWorkMult>
  <LL-HasRecipe>Has a recipe</LL-HasRecipe>
  <LL-Deconstructible>Is Deconstructible</LL-Deconstructible>
  <LL-LabelSelectMod>Select Mod</LL-LabelSelectMod>
  <LL-ThingComps>Thing Comps</LL-ThingComps>
  <LL-SpawnCategories>Spawn Categories</LL-SpawnCategories>
  <LL-SkillChanges>Skill Mods</LL-SkillChanges>
  <LL-ForcedTraits>Skill Mods</LL-ForcedTraits>
  <LL-DisabledWork>Disabled Work</LL-DisabledWork>

  <LL-LabelCopyTip>Copy proficiencies</LL-LabelCopyTip>
  <LL-LabelPasteTip>Paste proficiencies</LL-LabelPasteTip>
  <LL-LabelCopyAllTip>Paste the copied proficiencies to every backstory in the filtered list</LL-LabelCopyAllTip>


  <LL-LabelSearchDesc>Search Description</LL-LabelSearchDesc>
  <LL-LabelSearchProf>Search Proficiencies</LL-LabelSearchProf>
  <LL-LabelModFilter>Filter by Mod</LL-LabelModFilter>

  <LL-LabelNone>None</LL-LabelNone>
  <LL-LabelApplyFilters>Filter</LL-LabelApplyFilters>
  <LL-FilterByDefNames>by def name</LL-FilterByDefNames>
  <LL-FilterByLabels>by label</LL-FilterByLabels>
  <LL-FilterByDescription>by description</LL-FilterByDescription>
  <LL-FilterByTitle>by backstory title</LL-FilterByTitle>
  <LL-FilterBySpawnCategory>by backstory spawn category</LL-FilterBySpawnCategory>

  <LL-LabelAll>All</LL-LabelAll>
  <LL-LabelHelp>Help</LL-LabelHelp>

  <LL-PatchTool>Patching Utility</LL-PatchTool>
  <LL-Hide>Hide</LL-Hide>
  <LL-Show>Show</LL-Show>
  <LL-Patched>Patched</LL-Patched>

  <LL-ButtonReward>Rew</LL-ButtonReward>
  <LL-ButtonRequire>Req</LL-ButtonRequire>
  <LL-ButtonDeconReward>Dec</LL-ButtonDeconReward>
  <LL-ButtonAdd>Add</LL-ButtonAdd>
  <LL-ButtonAddFiltered>Add to Filtered</LL-ButtonAddFiltered>
  <LL-ButtonAddConditional>Add Conditional</LL-ButtonAddConditional>
  <LL-ButtonAddTemplate>Add Template</LL-ButtonAddTemplate>

  <LL-Conditional>Conditional</LL-Conditional>
  <LL-ConditionalRolls>Rolls</LL-ConditionalRolls>
  <LL-ConditionalChance>% per roll</LL-ConditionalChance>
  <LL-NewTemplateLabel>New Template</LL-NewTemplateLabel>
  <LL-ApplyTemplate>Apply</LL-ApplyTemplate>

  <LL-ReportActivityXp>Activity XP Report</LL-ReportActivityXp>
  <LL-ReportsLabel>Reports</LL-ReportsLabel>


</LanguageData>
